{
    "apiVersion": "2.0.0",
    "swaggerVersion": "1.2",
    "basePath": "",
    "info": {
        "title": "",
        "description": "",
        "contact": "",
        "license": "",
        "licenseUrl": ""
    },
    "authorizations": {},
    "concurrency": {
        "interactionMode": "",
        "concurrencyScheme": "",
        "roleSelectionMechanism": ["race"],
        "roles": [
            {
                "role": "",
                "selectionMechanism": [""]
            }
        ]
    },
    "apis": [
        {
            "protocol": "",
            "produces": [
                ""
            ],
            "operations": [
                {
                    "method": "",
                    "nickname": "",
                    "summary": "",
                    "notes": "",
                    "type": "",
                    "parameters": [
                        {
                            "name": "",
                            "description": "",
                            "required": true,
                            "paramType": "",
                            "type": "",
                            "allowMultiple": false
                        }
                    ],
                    "authorizations": {},
                    "responseMessages": [
                        {
                            "code": ,
                            "message": ""
                        }
                    ]
                }
            ]
        }
    ],
    "models": {
        "Client": {
            "id": "Client",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "The type of client application",
                    "enum": [
                        "OpenSocial gadget",
                        "Web page",
                        "Desktop application"
                    ]
                },
                "url": {
                    "type": "string",
                    "description": "The URI where the client application resides"
                }
            }
        },
        "ClientResponse": {
            "id": "ClientResponse",
            "properties": {
                "method": {
                    "type": ""
                },
                "clients": {
                    "type": "",
                    "items": {
                        "$ref": "Client"
                    }
                }
            }
        },
        "Sensor": {
            "id": "",
            "required": [
                "sensorId", "fullName"
            ],
            "properties": {
                "sensorId": {
                    "type": ""
                },
                "fullName": {
                    "type": ""
                },
                "description": {
                    "type": ""
                },
                "webSocketType": {
                    "type": "",
                    "description": "",
                    "enum": [
                        "text",
                        "binary"
                    ],
                    "defaultValue": "text"
                },
                "singleWebSocketRecommended": {
                    "type": "boolean",
                    "description": "If this field is set to true it means that the smart device expects that a client opens a dedicated websocket for to read from this value",
                    "defaultValue": false
                },
                "produces": {
                    "type": "",
                    "description": "The mime-type of the data that is produced by this sensor. A list of mime types can be found at http://en.wikipedia.org/wiki/Internet_media_type",
                    "defaultValue": "application/json"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "Value"
                    }
                },
                "configuration": {
                    "type": "array",
                    "description": "The configuration consists of an array of JSON objects that consist of parameter and type",
                    "items": {
                        "$ref": "ConfigurationMetadataItem"
                    }
                },
                "accessMode": {
                    "type": "AccessMode"
                }
            }
        },
        "Value": {
            "id": "Value",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "unit": {
                    "type": "string"
                },
                "type": {
                    "type": "string",
                    "description": "The data type of this value",
                    "enum": [
                        "integer",
                        "long",
                        "float",
                        "double",
                        "string",
                        "byte",
                        "boolean",
                        "date",
                        "dateTime",
                        "object",
                        "array",
                        "any",
                        "binary"
                    ]
                },
                "rangeMinimum": {
                    "type": "number",
                    "format": "double"
                },
                "rangeMaximum": {
                    "type": "number",
                    "format": "double"
                },
                "rangeStep": {
                    "type": "number",
                    "format": "double"
                },
                "lastMeasured": {
                    "type": "date-time"
                },
                "updateFrequency": {
                    "type": "number",
                    "description": "The frequency in Hertz of which the sensor value updates",
                    "format": "double"
                }
            }
        },
        "ConfigurationMetadataItem": {
            "id": "ConfigurationMetadataItem",
            "required": [
                "parameter", "type"
            ],
            "properties": {
                "parameter": {
                    "type": "string",
                    "description": "The name of the configuration parameter"
                },
                "description": {
                    "type": "string",
                    "description": "This field can provide some more information on how this parameter should be used."
                },
                "type": {
                    "type": "string",
                    "description": "The data type of that this configuration parameters expects, e.g. number or string",
                    "enum": [
                        "integer",
                        "long",
                        "float",
                        "double",
                        "string",
                        "byte",
                        "boolean",
                        "date",
                        "dateTime",
                        "object",
                        "array",
                        "any",
                        "binary"
                    ]
                },
                "items": {
                    "type": "string",
                    "description": "This field should only be used when the type is 'array'. It describes which types are present within the array",
                    "enum": [
                        "integer",
                        "long",
                        "float",
                        "double",
                        "string",
                        "byte",
                        "boolean",
                        "date",
                        "dateTime",
                        "object",
                        "any",
                        "binary"
                    ]
                }
            }
        },
        "AccessMode": {
            "id": "AccessMode",
            "properties": {
                "type": {
                    "type": "string",
                    "enum": [
                        "push",
                        "pull",
                        "stream"
                    ]
                },
                "nominalUpdateInterval": {
                    "type": "number",
                    "format": "float"
                },
                "userModifiableFrequency": {
                    "type": "boolean",
                    "defaultValue": false
                }
            }
        },
        "SimpleRequest": {
            "id": "SimpleRequest",
            "required": [
                "method"
            ],
            "properties": {
                "authToken": {
                    "type": "string"
                },
                "method": {
                    "type": "string",
                    "description": "The method should be equal to the nickname of one of the provided services."
                }
            }
        },
        "SensorMetadataResponse": {
            "id": "SensorMetadataResponse",
            "required": [
                "method", "sensors"
            ],
            "properties": {
                "method": {
                    "type": "string",
                    "description": "The method should be equal to the nickname of one of the provided services."
                },
                "sensors": {
                    "type": "array",
                    "items": {
                        "$ref": "Sensor"
                    }
                }
            }
        },
        "SensorDataRequest": {
            "id": "SensorDataRequest",
            "required": ["method", "sensorId"
            ],
            "properties": {
                "method": {
                    "type": "string",
                    "description": "The method should be equal to the nickname of one of the provided services."
                },
                "sensorId": {
                    "type": "string"
                },
                "configuration": {
                    "type": "array",
                    "items": {
                        "$ref": "ConfigurationItem"
                    }
                },
                "accessRole": {
                    "type": "string",
                    "description": "This field contains one of the roles defined in the concurrency roles list. If accessRole is not defined, the controller role is assumed."
                }
            }
        },
        "ConfigurationItem": {
            "id": "ConfigurationItem",
            "required": [
                "parameter", "value"
            ],
            "properties": {
                "parameter": {
                    "type": "string",
                    "description": "The name of the configuration parameter"
                },
                "value": {
                    "type": "any",
                    "description": "The value to set the configuration parameter to. The type should equal the type given in the metadata for this sensor."
                }
            }
        },
        "SensorDataResponse": {
            "id": "SensorDataResponse",
            "required": [
                "method", "sensorId"
            ],
            "properties": {
                "method": {
                    "type": "string",
                    "description": "The method should be equal to the nickname of one of the provided services."
                },
                "sensorId": {
                    "type": "string"
                },
                "accessRole": {
                    "type": "string",
                    "description": "This field contains one of the roles defined in the concurrency roles list. If no roles are defined controller is returned. If the observer is returned, the observerMode field will be available with extra info on the status of the lab."
                },
                "responseData": {
                    "type": "SensorResponseData",
                    "description": "The data as measured by this sensor"
                },
                "payload": {
                    "type": "any",
                    "description": "This optional payload field can contain any JSON object that provides extra information on this sensor or the current measurement."
                },
                "observerMode": {
                    "type": "ObserverMode",
                    "description": "This field is only available if the accessRole field returns observer."
                }
            }
        },
        "SensorResponseData": {
            "id": "SensorResponseData",
            "required": [],
            "properties": {
                "valueNames": {
                    "type": "array",
                    "description": "An ordered array with all the value names of this sensor. The same order will be applied to the data array and lastMeasured array.",
                    "items": {
                        "type": "string"
                    }
                },
                "data": {
                    "type": "array",
                    "description": "An ordered array with all the data values of this sensor. Each data element in the array should be ordered in the same position of its corresponding value elements in the values array.",
                    "items": {
                        "type": "any"
                    }
                },
                "lastMeasured": {
                    "type": "array",
                    "description": "An ordered array with all the data values of this sensor. Each data element in the array should be ordered in the same position of its corresponding value elements in the values array.",
                    "items": {
                        "type": "date-time"
                    }
                }
            }
        },
        "Actuator": {
            "id": "Actuator",
            "required": [
                "actuatorId", "fullName"
            ],
            "properties": {
                "actuatorId": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "webSocketType": {
                    "type": "string",
                    "description": "the type of websocket. Websockets can either be binary or textual.",
                    "enum": [
                        "text",
                        "binary"
                    ],
                    "defaultValue": "text"
                },
                "singleWebSocketRecommended": {
                    "type": "boolean",
                    "description": "If this field is set to true it means that the smart device expects that a client opens a dedicated websocket for to read from this value",
                    "defaultValue": false
                },
                "consumes": {
                    "type": "string",
                    "description": "The mime-type of the data that is consumed by this actuator. A list of mime types can be found at http://en.wikipedia.org/wiki/Internet_media_type",
                    "defaultValue": "application/json"
                },
                "produces": {
                    "type": "string",
                    "description": "The mime-type of the data that is produced by this actuator. A list of mime types can be found at http://en.wikipedia.org/wiki/Internet_media_type",
                    "defaultValue": "application/json"
                },
                "values": {
                    "type": "array",
                    "items": {
                        "$ref": "Value"
                    }
                },
                "configuration": {
                    "type": "array",
                    "description": "The configuration consists of an array of JSON objects that consist of parameter and type",
                    "items": {
                        "$ref": "ConfigurationMetadataItem"
                    }
                },
                "accessMode": {
                    "type": "AccessMode"
                }
            }
        },
        "ActuatorMetadataResponse": {
            "id": "ActuatorMetadataResponse",
            "required": [
                "method", "actuators"
            ],
            "properties": {
                "method": {
                    "type": "string",
                    "description": "The method should be equal to the nickname of one of the provided services."
                },
                "actuators": {
                    "type": "array",
                    "items": {
                        "$ref": "Actuator"
                    },
                    "description": "The list of actuator metadata elements"
                }
            }
        },
        "ActuatorDataRequest": {
            "id": "ActuatorDataRequest",
            "required": [
                "method", "actuatorId"
            ],
            "properties": {
                "authToken": {
                    "type": "string"
                },
                "method": {
                    "type": "string",
                    "description": "The method should be equal to the nickname of one of the provided services."
                },
                "actuatorId": {
                    "type": "string"
                },
                "valueNames": {
                    "type": "array",
                    "description": "An ordered array with all the value names of this sensor. The same order will be applied to the data array and lastMeasured array.",
                    "items": {
                        "type": "string"
                    }
                },
                "data": {
                    "type": "array",
                    "description": "An ordered array with all the data values of this sensor. Each data element in the array should be ordered in the same position of its corresponding value elements in the valueNames array.",
                    "items": {
                        "type": "any"
                    }
                },
                "configuration": {
                    "type": "array",
                    "items": {
                        "$ref": "ConfigurationItem"
                    }
                },
                "accessRole": {
                    "type": "string",
                    "description": "This field contains one of the roles defined in the concurrency roles list. If accessRole is not defined the controller role is assumed."
                }
            }
        },
        "ActuatorDataResponse": {
            "id": "ActuatorDataResponse",
            "required": [
                "method"
            ],
            "properties": {
                "method": {
                    "type": "string",
                    "description": "The method should be equal to the nickname of one of the provided services."
                },
                "lastMeasured": {
                    "type": "date-time"
                },
                "accessRole": {
                    "type": "string",
                    "description": "This field contains one of the roles defined in the concurrency roles list. If no roles are defined controller is returned. If the observer is returned, the observerMode field will be available with extra info on the status of the lab."
                },
                "payload": {
                    "type": "any",
                    "description": "The payload can be useful for describing a result that is returned, for instance by using the SensorResponseData model. Since results can differ from acknowledgements to result data, the field is optional and can contain any JSON object."
                },
                "observerMode": {
                    "type": "ObserverMode",
                    "description": "This field is only available if the accessRole field returns observer."
                }
            }
        },
        "ObserverMode": {
            "id": "ObserverMode",
            "required": [],
            "properties": {
                "queueSize": {
                    "type": "integer",
                    "description": "Provides the length of the user waiting queue that want to get control of the lab"
                },
                "queuePosition": {
                    "type": "integer",
                    "description": "Provides the position of the client who made this call in the user waiting queue. This value should be positive and smaller or equal to queueSize."
                },
                "estimatedTimeUntilControl": {
                    "type": "integer",
                    "description": "The estimated waiting time from now on until the client will get controllerMode access. The time is expressed in seconds."
                }
            }
        }
    }
}